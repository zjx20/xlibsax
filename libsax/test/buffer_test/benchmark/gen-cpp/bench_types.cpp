/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "bench_types.h"



const char* ComplexObj::ascii_fingerprint = "5854B23019966AD906A3708BAE2981A5";
const uint8_t ComplexObj::binary_fingerprint[16] = {0x58,0x54,0xB2,0x30,0x19,0x96,0x6A,0xD9,0x06,0xA3,0x70,0x8B,0xAE,0x29,0x81,0xA5};

uint32_t ComplexObj::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->b);
          this->__isset.b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->c);
          this->__isset.c = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->d);
          this->__isset.d = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->e);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->f);
          this->__isset.f = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->g);
          this->__isset.g = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->h.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->h.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->h[_i4]);
            }
            iprot->readListEnd();
          }
          this->__isset.h = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ComplexObj::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ComplexObj");
  xfer += oprot->writeFieldBegin("a", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->a);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->b);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("c", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->c);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("d", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->d);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("e", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->e);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("f", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->f);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("g", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->g);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("h", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->h.size()));
    std::vector<int32_t> ::const_iterator _iter5;
    for (_iter5 = this->h.begin(); _iter5 != this->h.end(); ++_iter5)
    {
      xfer += oprot->writeI32((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


