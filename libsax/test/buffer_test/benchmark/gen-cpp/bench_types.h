/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef bench_TYPES_H
#define bench_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _ComplexObj__isset {
  _ComplexObj__isset() : a(false), b(false), c(false), d(false), e(false), f(false), g(false), h(false) {}
  bool a;
  bool b;
  bool c;
  bool d;
  bool e;
  bool f;
  bool g;
  bool h;
} _ComplexObj__isset;

class ComplexObj {
 public:

  static const char* ascii_fingerprint; // = "5854B23019966AD906A3708BAE2981A5";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x54,0xB2,0x30,0x19,0x96,0x6A,0xD9,0x06,0xA3,0x70,0x8B,0xAE,0x29,0x81,0xA5};

  ComplexObj() : a(0), b(0), c(0), d(0), e(0), f(0), g("") {
  }

  virtual ~ComplexObj() throw() {}

  bool a;
  int8_t b;
  int16_t c;
  int32_t d;
  int64_t e;
  double f;
  std::string g;
  std::vector<int32_t>  h;

  _ComplexObj__isset __isset;

  void __set_a(const bool val) {
    a = val;
  }

  void __set_b(const int8_t val) {
    b = val;
  }

  void __set_c(const int16_t val) {
    c = val;
  }

  void __set_d(const int32_t val) {
    d = val;
  }

  void __set_e(const int64_t val) {
    e = val;
  }

  void __set_f(const double val) {
    f = val;
  }

  void __set_g(const std::string& val) {
    g = val;
  }

  void __set_h(const std::vector<int32_t> & val) {
    h = val;
  }

  bool operator == (const ComplexObj & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    if (!(c == rhs.c))
      return false;
    if (!(d == rhs.d))
      return false;
    if (!(e == rhs.e))
      return false;
    if (!(f == rhs.f))
      return false;
    if (!(g == rhs.g))
      return false;
    if (!(h == rhs.h))
      return false;
    return true;
  }
  bool operator != (const ComplexObj &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComplexObj & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
